//////////////////////////////////////////////////////////////////////
// C++ source file generated by SCRC V2.1
// Design: tb
// File:   tb.cc
// Time:   Thu Mar 20 14:31:49 2008
//////////////////////////////////////////////////////////////////////

#include "tb.h"

// variable definitions //////////////////////////////////////////////

#line 12 "./default.sc"
static const int LuminanceDCBits[16] = { 
  0,1,5,1,1,1,1,1,
  1,0,0,0,0,0,0,0 };

static const int LuminanceDCValues[162] = { 
  0,1,2,3,4,5,6,7,8,9,10,11 };

static const int LuminanceACBits[16] = { 
  0,2,1,3,3,2,4,3,
  5,5,4,4,0,0,1,125 };

static const int LuminanceACValues[162] = { 
  1,2,3,0,4,17,5,18,
  33,49,65,6,19,81,97,7,
  34,113,20,50,129,145,161,8,
  35,66,177,193,21,82,209,240,
  36,51,98,114,130,9,10,22,
  23,24,25,26,37,38,39,40,
  41,42,52,53,54,55,56,57,
  58,67,68,69,70,71,72,73,
  74,83,84,85,86,87,88,89,
  90,99,100,101,102,103,104,105,
  106,115,116,117,118,119,120,121,
  122,131,132,133,134,135,136,137,
  138,146,147,148,149,150,151,152,
  153,154,162,163,164,165,166,167,
  168,169,170,178,179,180,181,182,
  183,184,185,186,194,195,196,197,
  198,199,200,201,202,210,211,212,
  213,214,215,216,217,218,225,226,
  227,228,229,230,231,232,233,234,
  241,242,243,244,245,246,247,248,
  249,250 };

#line 17 "./global.sc"
const int QuantizationMatrix[64] = { 
  16,11,10,16,24,40,51,61,
  12,12,14,19,26,58,60,55,
  14,13,16,24,40,57,69,56,
  14,17,22,29,51,87,80,62,
  18,22,37,56,68,109,103,77,
  24,35,55,64,81,104,113,92,
  49,64,78,87,103,121,120,101,
  72,92,95,98,112,100,103,99 };

#line 12 "./header.sc"
static const int IZigzagIndex[] = { 
  0,1,8,16,9,2,3,10,
  17,24,32,25,18,11,4,5,
  12,19,26,33,40,48,41,34,
  27,20,13,6,7,14,21,28,
  35,42,49,56,57,50,43,36,
  29,22,15,23,30,37,44,51,
  58,59,52,45,38,31,39,46,
  53,60,61,54,47,55,62,63 };

#line 22 "./huff.sc"
static const int csize[] = { 
  0,
  1,
  2,2,
  3,3,3,3,
  4,4,4,4,4,4,4,4,
  5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,
  6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,
  6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,
  7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,
  7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,
  7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,
  7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,
  8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,
  8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,
  8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,
  8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,
  8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,
  8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,
  8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,
  8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8 };


static const int ZigzagIndex[] = { 
  0,1,5,6,14,15,27,28,
  2,4,7,13,16,26,29,42,
  3,8,12,17,25,30,41,43,
  9,11,18,24,31,40,44,53,
  10,19,23,32,39,45,52,54,
  20,22,33,38,46,51,55,60,
  21,34,37,47,50,56,59,61,
  35,36,48,49,57,58,62,63 };

// channel class definitions /////////////////////////////////////////

#line 106 "tb.cc"
CBitAdapter::CBitAdapter(i_byte_sender (&chData))
    : chData(chData),
    left_bits(8),
    write_byte(((unsigned char)'\000'))
{   /* nothing */
}

CBitAdapter::~CBitAdapter(void)
{   /* nothing */
}

#line 43 "./adapter.sc"
void CBitAdapter::FlushBits(void)
{   



    chData.send(write_byte);
    if (write_byte == 255) {



	chData.send(0);
    }
}

#line 61 "./adapter.sc"
int CBitAdapter::WriteBits(int n, int code)
{   
    int p;

    unsigned int lmask[] = { 
      0u,
      1u,3u,7u,15u,
      31u,63u,127u,255u,
      511u,1023u,2047u,4095u,
      8191u,16383u,32767u,65535u };


    _specc::waitfor((4000));


    if (n < 0)
    {   
	if (left_bits < 8) {
	    n = left_bits;
	    FlushBits();
	    write_byte = 0;
	    left_bits = 8;
	}
	else 
	    n = 0;

	return n;
    }

    code &= lmask[n];
    p = n - left_bits;

    if (n == left_bits) {
	write_byte |= code;
	FlushBits();
	write_byte = 0;
	left_bits = 8;
    }
    else  if (n > left_bits) {
	    write_byte |= (code >> p);
	    FlushBits();
	    if (p > 8) {
		write_byte = (255 & (code >> (p - 8)));
		FlushBits();
		p -= 8;
	    }

	    write_byte = (code & lmask[p]) << (8 - p);
	    left_bits = 8 - p;
	}
	else  {
	    write_byte |= (code <<  -p);
	    left_bits -= n;
	}

    return n;
}

#line 31 "./adapter.sc"
int CBitAdapter::WriteByte(int code)
{   
    chData.send((char)code);
    return 0;
}

void CBitAdapter::WriteMarker(int m)
{   
    chData.send(255);
    chData.send((char)m);
}

#line 24 "./adapter.sc"
int CBitAdapter::WriteWord(int code)
{   
    chData.send((char)(code >> 8));
    chData.send((char)(code & 255));
    return 2;
}

#line 213 "tb.cc"
CSWProtocol::CSWProtocol(_specc::signal<bit<_BITLEN(31,0),false> > (&MWDATA), _specc::signal<bit<_BITLEN(31,0),false> > (&MRDATA), _specc::signal<bit<_BITLEN(0,0),false> > (&MTSB), _specc::signal<bit<_BITLEN(0,0),false> > (&MTAB), _specc::signal<bit<_BITLEN(0,0),false> > (&MWDATAOE), _specc::signal<bit<_BITLEN(31,0),false> > (&MADDR), _specc::signal<bit<_BITLEN(0,0),false> > (&MRWB))
    : MWDATA(MWDATA), MRDATA(MRDATA), MTSB(MTSB), MTAB(MTAB), MWDATAOE(MWDATAOE), MADDR(MADDR), MRWB(MRWB)
{   /* nothing */
}

CSWProtocol::~CSWProtocol(void)
{   /* nothing */
}

#line 36 "./bus.sc"
bit<_BITLEN(31,0),false> CSWProtocol::read(bit<_BITLEN(31,0),false> addr)
{   
    bit<_BITLEN(31,0),false> data;
    bit<_BITLEN(0,0),false> val;

    _specc::waitfor((6));


    MADDR = addr;
    MRWB = 1;
    MTSB = 0;

    _specc::waitfor((6));


    val = ((bit<_BITLEN(0,0),false>)MTAB);
    while(val != 0)
    {   
	MADDR = addr;
	MTSB = 1;
	MRWB = 1;
	_specc::waitfor((6));
	val = ((bit<_BITLEN(0,0),false>)MTAB);
    }

    data = ((bit<_BITLEN(31,0),false>)MRDATA);
    _specc::waitfor((6));

    return data;
}

void CSWProtocol::write(bit<_BITLEN(31,0),false> addr, bit<_BITLEN(31,0),false> data)
{   
    bit<_BITLEN(0,0),false> val;

    _specc::waitfor((6));


    MADDR = addr;
    MRWB = 0;
    MWDATAOE = 0;
    MTSB = 0;

    _specc::waitfor((6));


    val = ((bit<_BITLEN(0,0),false>)MTAB);
    while(val != 0)
    {   
	MADDR = addr;
	MTSB = 1;
	MRWB = 0;
	MWDATAOE = 1;
	MWDATA = data;
	_specc::waitfor((6));
	val = ((bit<_BITLEN(0,0),false>)MTAB);
    }

    _specc::waitfor((6));
}

#line 285 "tb.cc"
CSWBus::CSWBus(_specc::signal<bit<_BITLEN(31,0),false> > (&MWDATA), _specc::signal<bit<_BITLEN(31,0),false> > (&MRDATA), _specc::signal<bit<_BITLEN(0,0),false> > (&MTSB), _specc::signal<bit<_BITLEN(0,0),false> > (&MTAB), _specc::signal<bit<_BITLEN(0,0),false> > (&MWDATAOE), _specc::signal<bit<_BITLEN(31,0),false> > (&MADDR), _specc::signal<bit<_BITLEN(0,0),false> > (&MRWB), _specc::signal<bit<_BITLEN(0,0),false> > (&INTC))
    : MWDATA(MWDATA), MRDATA(MRDATA), MTSB(MTSB), MTAB(MTAB), MWDATAOE(MWDATAOE), MADDR(MADDR), MRWB(MRWB), INTC(INTC),
    protocol(MWDATA, MRDATA, MTSB, MTAB, MWDATAOE, MADDR, MRWB)
{   /* nothing */
}

CSWBus::~CSWBus(void)
{   /* nothing */
}

#line 150 "./bus.sc"
void CSWBus::recvBlock(int data[64], int addr)
{   
    int i;


    while(((INTC).test()))
	_specc::wait(falling(&INTC), ((void*)0));


    for(i = 0; i < 64; i++ )
	data[i] = ((protocol.read(addr)).toInt());
}

#line 131 "./bus.sc"
void CSWBus::recvInt(int *data, int addr)
{   

    while(((INTC).test()))
	_specc::wait(falling(&INTC), ((void*)0));


     *data = ((protocol.read(addr)).toInt());
}

void CSWBus::sendBlock(int data[64], int addr)
{   
    int i;


    for(i = 0; i < 64; i++ )
	protocol.write(addr, data[i]);
}

#line 125 "./bus.sc"
void CSWBus::sendInt(int data, int addr)
{   

    protocol.write(addr, data);
}

#line 337 "tb.cc"
CHWProtocol::CHWProtocol(_specc::signal<bit<_BITLEN(31,0),false> > (&DB), _specc::signal<bit<_BITLEN(0,0),false> > (&DBOE), _specc::signal<bit<_BITLEN(0,0),false> > (&TSB), _specc::signal<bit<_BITLEN(0,0),false> > (&TAB), _specc::signal<bit<_BITLEN(31,0),false> > (&MADDR), _specc::signal<bit<_BITLEN(0,0),false> > (&MRWB))
    : DB(DB), DBOE(DBOE), TSB(TSB), TAB(TAB), MADDR(MADDR), MRWB(MRWB)
{   /* nothing */
}

CHWProtocol::~CHWProtocol(void)
{   /* nothing */
}

#line 189 "./bus.sc"
bit<_BITLEN(31,0),false> CHWProtocol::read(bit<_BITLEN(31,0),false> addr)
{   
    bit<_BITLEN(31,0),false> Reg_In;


    TAB = 1;
    _specc::wait(falling(&TSB), ((void*)0));


    if (addr != ((bit<_BITLEN(31,0),false>)MADDR))
    {   
	error("Unexpected address on bus!", 0);
    }
    _specc::waitfor((4));


    while( !((DBOE).test()))
	_specc::wait(rising(&DBOE), ((void*)0));
    Reg_In = ((bit<_BITLEN(31,0),false>)DB);
    TAB = 1;
    _specc::waitfor((4));


    TAB = 0;
    _specc::waitfor((4));
    return Reg_In;
}

void CHWProtocol::write(bit<_BITLEN(31,0),false> addr, bit<_BITLEN(31,0),false> data)
{   
    bit<_BITLEN(31,0),false> Reg_Out;


    TAB = 1;
    _specc::wait(falling(&TSB), ((void*)0));


    if (addr != ((bit<_BITLEN(31,0),false>)MADDR))
    {   
	error("Unexpected address on bus!", 0);
    }
    _specc::waitfor((4));


    Reg_Out = data;
    TAB = 1;
    _specc::waitfor((4));


    DB = Reg_Out;
    TAB = 0;
    _specc::waitfor((4));
    return ;
}

#line 403 "tb.cc"
CHWBus::CHWBus(_specc::signal<bit<_BITLEN(31,0),false> > (&DB), _specc::signal<bit<_BITLEN(0,0),false> > (&DBOE), _specc::signal<bit<_BITLEN(0,0),false> > (&TSB), _specc::signal<bit<_BITLEN(0,0),false> > (&TAB), _specc::signal<bit<_BITLEN(31,0),false> > (&MADDR), _specc::signal<bit<_BITLEN(0,0),false> > (&MRWB), _specc::signal<bit<_BITLEN(0,0),false> > (&INTC))
    : DB(DB), DBOE(DBOE), TSB(TSB), TAB(TAB), MADDR(MADDR), MRWB(MRWB), INTC(INTC),
    protocol(DB, DBOE, TSB, TAB, MADDR, MRWB)
{   /* nothing */
}

CHWBus::~CHWBus(void)
{   /* nothing */
}

#line 289 "./bus.sc"
void CHWBus::recvBlock(int *data, int addr)
{   
    int i;


    for(i = 0; i < 64; i++ )
	data[i] = ((protocol.read(addr)).toInt());
}

#line 269 "./bus.sc"
void CHWBus::recvInt(int *data, int addr)
{   

     *data = ((protocol.read(addr)).toInt());
}

void CHWBus::sendBlock(int data[64], int addr)
{   
    int i;


    INTC = 0;


    for(i = 0; i < 64; i++ )
	protocol.write(addr, data[i]);

    INTC = 1;
}

#line 445 "tb.cc"
c_byte_double_handshake::c_byte_double_handshake(void)
    : v(false),
    w(false)
{   /* nothing */
}

c_byte_double_handshake::~c_byte_double_handshake(void)
{   /* nothing */
}

#line 26 "./chann.sc"
void c_byte_double_handshake::receive(char *d) { if ( !v) { w = true; _specc::wait(event(&req), ((void*)0)); w = false;
    }

#line 26 "./chann.sc"
     *d = tmpd; v = false; _specc::notify(event(&ack), ((void*)0)); _specc::wait(event(&ack), ((void*)0));
}

#line 26 "./chann.sc"
void c_byte_double_handshake::send(char d) { tmpd = d; v = true; if (w) { _specc::notify(event(&req), ((void*)0));
    }

#line 26 "./chann.sc"
    _specc::wait(event(&ack), ((void*)0));
}

#line 472 "tb.cc"
c_int_double_handshake::c_int_double_handshake(void)
    : v(false),
    w(false)
{   /* nothing */
}

c_int_double_handshake::~c_int_double_handshake(void)
{   /* nothing */
}

#line 36 "./chann.sc"
void c_int_double_handshake::receive(int *d) { if ( !v) { w = true; _specc::wait(event(&req), ((void*)0)); w = false;
    }

#line 36 "./chann.sc"
     *d = tmpd; v = false; _specc::notify(event(&ack), ((void*)0)); _specc::wait(event(&ack), ((void*)0));
}

#line 36 "./chann.sc"
void c_int_double_handshake::send(int d) { tmpd = d; v = true; if (w) { _specc::notify(event(&req), ((void*)0));
    }

#line 36 "./chann.sc"
    _specc::wait(event(&ack), ((void*)0));
}

#line 499 "tb.cc"
c_block_double_handshake::c_block_double_handshake(void)
    : v(false),
    w(false)
{   /* nothing */
}

c_block_double_handshake::~c_block_double_handshake(void)
{   /* nothing */
}

#line 48 "./chann.sc"
void c_block_double_handshake::receive(int (*d)[64]) { if ( !v) { w = true; _specc::wait(event(&req), ((void*)0)); w = false;
    }

#line 48 "./chann.sc"
    { unsigned int _scc_index_0; for(_scc_index_0=0;_scc_index_0<64;_scc_index_0++) ( *d)[_scc_index_0] = (tmpd)[_scc_index_0]; } v = false; _specc::notify(event(&ack), ((void*)0)); _specc::wait(event(&ack), ((void*)0));
}

#line 48 "./chann.sc"
void c_block_double_handshake::send(int d[64]) { { unsigned int _scc_index_0; for(_scc_index_0=0;_scc_index_0<64;_scc_index_0++) (tmpd)[_scc_index_0] = (d)[_scc_index_0]; } v = true; if (w) { _specc::notify(event(&req), ((void*)0));
    }

#line 48 "./chann.sc"
    _specc::wait(event(&ack), ((void*)0));
}

// behavior class definitions ////////////////////////////////////////

#line 528 "tb.cc"
DCT::DCT(int (&HData)[64], int (&DData)[64])
    : HData(HData), DData(DData),
    i(0)
{   /* nothing */
}

DCT::~DCT(void)
{   /* nothing */
}

#line 27 "./dct.sc"
void DCT::main(void)
{   
    { enum _scc_state { _scc_state_PD_S1, _scc_state_PD_S2, _scc_state_PD_S3, _scc_state_PD_S4, _scc_state_PD_S5, _scc_state_CDCT_S1, _scc_state_CDCT_S2, _scc_state_CDCT_S3, _scc_state_CDCT_S4, _scc_state_CDCT_S5, _scc_state_CDCT_S6, _scc_state_CDCT_S7, _scc_state_CDCT_S8, _scc_state_CDCT_S9, _scc_state_CDCT_S10, _scc_state_CDCT_S11, _scc_state_CDCT_S12, _scc_state_CDCT_S13, _scc_state_CDCT_S14, _scc_state_CDCT_S15, _scc_state_CDCT_S16, _scc_state_CDCT_S17, _scc_state_CDCT_S18, _scc_state_CDCT_S19, _scc_state_CDCT_S20, _scc_state_CDCT_S21, _scc_state_CDCT_S22, _scc_state_CDCT_S23, _scc_state_CDCT_S24, _scc_state_CDCT_S25, _scc_state_CDCT_S26, _scc_state_CDCT_S27, _scc_state_CDCT_S28, _scc_state_CDCT_S29, _scc_state_CDCT_S30, _scc_state_CDCT_S31, _scc_state_CDCT_S32, _scc_state_CDCT_S33, _scc_state_CDCT_S34, _scc_state_CDCT_S35, _scc_state_CDCT_S36, _scc_state_CDCT_S37, _scc_state_CDCT_S38, _scc_state_CDCT_S39, _scc_state_CDCT_S40, _scc_state_CDCT_S41, _scc_state_CDCT_S42, _scc_state_CDCT_S43, _scc_state_CDCT_S44, _scc_state_CDCT_S45, _scc_state_CDCT_S46, _scc_state_CDCT_S47, _scc_state_CDCT_S48, _scc_state_CDCT_S49, _scc_state_CDCT_S50, _scc_state_CDCT_S51, _scc_state_CDCT_S52, _scc_state_CDCT_S53, _scc_state_CDCT_S54, _scc_state_CDCT_S55, _scc_state_CDCT_S56, _scc_state_CDCT_S57, _scc_state_CDCT_S58, _scc_state_CDCT_S59, _scc_state_CDCT_S60, _scc_state_CDCT_S61, _scc_state_CDCT_S62, _scc_state_CDCT_S63, _scc_state_CDCT_S64, _scc_state_CDCT_S65, _scc_state_CDCT_S66, _scc_state_CDCT_S67, _scc_state_CDCT_S68, _scc_state_CDCT_S69, _scc_state_CDCT_S70, _scc_state_CDCT_S71, _scc_state_CDCT_S72, _scc_state_CDCT_S73, _scc_state_CDCT_S74, _scc_state_CDCT_S75, _scc_state_CDCT_S76, _scc_state_CDCT_S77, _scc_state_CDCT_S78, _scc_state_CDCT_S79, _scc_state_CDCT_S80, _scc_state_CDCT_S81, _scc_state_CDCT_S82, _scc_state_CDCT_S83, _scc_state_CDCT_S84, _scc_state_CDCT_S85, _scc_state_CDCT_S86, _scc_state_CDCT_S87, _scc_state_CDCT_S88, _scc_state_CDCT_S89, _scc_state_CDCT_S90, _scc_state_CDCT_S91, _scc_state_CDCT_S92, _scc_state_CDCT_S93, _scc_state_CDCT_S94, _scc_state_CDCT_S95, _scc_state_CDCT_S96, _scc_state_CDCT_S97, _scc_state_CDCT_S98, _scc_state_CDCT_S99, _scc_state_CDCT_S100, _scc_state_CDCT_S101, _scc_state_CDCT_S102, _scc_state_CDCT_S103, _scc_state_CDCT_S104, _scc_state_CDCT_S105, _scc_state_CDCT_S106, _scc_state_CDCT_S107, _scc_state_CDCT_S108, _scc_state_CDCT_S109, _scc_state_CDCT_S110, _scc_state_CDCT_S111, _scc_state_CDCT_S112, _scc_state_CDCT_S113, _scc_state_CDCT_S114, _scc_state_CDCT_S115, _scc_state_CDCT_S116, _scc_state_CDCT_S117, _scc_state_CDCT_S118, _scc_state_CDCT_S119, _scc_state_CDCT_S120, _scc_state_CDCT_S121, _scc_state_CDCT_S122, _scc_state_CDCT_S123, _scc_state_CDCT_S124, _scc_state_CDCT_S125, _scc_state_CDCT_S126, _scc_state_CDCT_S127, _scc_state_CDCT_S128, _scc_state_CDCT_S129, _scc_state_CDCT_S130, _scc_state_CDCT_S131, _scc_state_CDCT_S132, _scc_state_CDCT_S133, _scc_state_CDCT_S134, _scc_state_CDCT_S135, _scc_state_CDCT_S136, _scc_state_CDCT_S137, _scc_state_CDCT_S138, _scc_state_CDCT_S139, _scc_state_CDCT_S140, _scc_state_CDCT_S141, _scc_state_CDCT_S142, _scc_state_CDCT_S146, _scc_state_CDCT_S147, _scc_state_CDCT_S143, _scc_state_CDCT_S144, _scc_state_BD_S0, _scc_state_BD_S1, _scc_state_BD_S2, _scc_state_BD_S3, _scc_state_BD_S4, _scc_state_BD_S5, _scc_state_BD_S6, _scc_state_BD_S7, _scc_state_CDCT_S145, _scc_state_break }; _specc::auto_event _scc_clock(4ull); _specc::buffered<int> _scc_state_register(event(&_scc_clock), _scc_state_PD_S1);  while(_scc_state_register != _scc_state_break) { _specc::wait(event(&_scc_clock), ((void*)0));  switch(_scc_state_register){ 




		case _scc_state_PD_S1: {
		    if (i < 64)
			_scc_state_register = _scc_state_PD_S2;
		    else 
			_scc_state_register = _scc_state_PD_S5; break;
		}



		case _scc_state_PD_S2: {
		    r_ram1 = HData[i];
		    _scc_state_register = _scc_state_PD_S3; break;
		}



		case _scc_state_PD_S3: {
		    r_alu = r_ram1 - 128;
		    _scc_state_register = _scc_state_PD_S4; break;
		}



		case _scc_state_PD_S4: {
		    HData[i] = r_alu;
		    i = i + 1;
		    _scc_state_register = _scc_state_PD_S1; break;
		}



		case _scc_state_PD_S5: {
		    i = 0;
		    _scc_state_register = _scc_state_CDCT_S1; break;
		}



		case _scc_state_CDCT_S1: {
		    if (i < 8)
			_scc_state_register = _scc_state_CDCT_S2;
		    else 
			_scc_state_register = _scc_state_CDCT_S72; break;
		}




		case _scc_state_CDCT_S2: {
		    rf[0] = i;
		    r_alu = i + 56;
		    _scc_state_register = _scc_state_CDCT_S3; break;
		}




		case _scc_state_CDCT_S3: {
		    rf[1] = r_alu;
		    _scc_state_register = _scc_state_CDCT_S4; break;
		}

#line 100 "./dct.sc"
		case _scc_state_CDCT_S4: {
		    r_ram1 = HData[rf[0]];
		    r_ram2 = HData[rf[1]];
		    _scc_state_register = _scc_state_CDCT_S5; break;
		}



		case _scc_state_CDCT_S5: {
		    r_alu = r_ram1 + r_ram2;
		    _scc_state_register = _scc_state_CDCT_S6; break;
		}




		case _scc_state_CDCT_S6: {
		    r_sh = ((r_alu) << (2));
		    r_alu = r_ram1 - r_ram2;
		    _scc_state_register = _scc_state_CDCT_S7; break;
		}




		case _scc_state_CDCT_S7: {
		    rf[2] = r_sh;
		    r_sh = ((r_alu) << (2));
		    _scc_state_register = _scc_state_CDCT_S8; break;
		}




		case _scc_state_CDCT_S8: {
		    rf[13] = r_sh;
		    _scc_state_register = _scc_state_CDCT_S9; break;
		}



		case _scc_state_CDCT_S9: {
		    rf[0] = rf[0] + 8;
		    _scc_state_register = _scc_state_CDCT_S10; break;
		}



		case _scc_state_CDCT_S10: {
		    rf[1] = rf[1] - 8;
		    _scc_state_register = _scc_state_CDCT_S11; break;
		}

#line 160 "./dct.sc"
		case _scc_state_CDCT_S11: {
		    r_ram1 = HData[rf[0]];
		    r_ram2 = HData[rf[1]];
		    _scc_state_register = _scc_state_CDCT_S12; break;
		}




		case _scc_state_CDCT_S12: {
		    r_alu = r_ram1 + r_ram2;
		    _scc_state_register = _scc_state_CDCT_S13; break;
		}




		case _scc_state_CDCT_S13: {
		    r_sh = ((r_alu) << (2));
		    r_alu = r_ram1 - r_ram2;
		    _scc_state_register = _scc_state_CDCT_S14; break;
		}




		case _scc_state_CDCT_S14: {
		    rf[3] = r_sh;
		    r_sh = ((r_alu) << (2));
		    _scc_state_register = _scc_state_CDCT_S15; break;
		}



		case _scc_state_CDCT_S15: {
		    rf[12] = r_sh;
		    _scc_state_register = _scc_state_CDCT_S16; break;
		}




		case _scc_state_CDCT_S16: {
		    rf[0] = rf[0] + 8;
		    _scc_state_register = _scc_state_CDCT_S17; break;
		}




		case _scc_state_CDCT_S17: {
		    rf[1] = rf[1] - 8;
		    _scc_state_register = _scc_state_CDCT_S18; break;
		}

#line 220 "./dct.sc"
		case _scc_state_CDCT_S18: {
		    r_ram1 = HData[rf[0]];
		    r_ram2 = HData[rf[1]];
		    _scc_state_register = _scc_state_CDCT_S19; break;
		}




		case _scc_state_CDCT_S19: {
		    r_alu = r_ram1 + r_ram2;
		    _scc_state_register = _scc_state_CDCT_S20; break;
		}




		case _scc_state_CDCT_S20: {
		    r_sh = ((r_alu) << (2));
		    r_alu = r_ram1 - r_ram2;
		    _scc_state_register = _scc_state_CDCT_S21; break;
		}




		case _scc_state_CDCT_S21: {
		    rf[4] = r_sh;
		    r_sh = ((r_alu) << (2));
		    _scc_state_register = _scc_state_CDCT_S22; break;
		}




		case _scc_state_CDCT_S22: {
		    rf[11] = r_sh;
		    _scc_state_register = _scc_state_CDCT_S23; break;
		}




		case _scc_state_CDCT_S23: {
		    rf[0] = rf[0] + 8;
		    _scc_state_register = _scc_state_CDCT_S24; break;
		}




		case _scc_state_CDCT_S24: {
		    rf[1] = rf[1] - 8;
		    _scc_state_register = _scc_state_CDCT_S25; break;
		}

#line 281 "./dct.sc"
		case _scc_state_CDCT_S25: {
		    r_ram1 = HData[rf[0]];
		    r_ram2 = HData[rf[1]];
		    _scc_state_register = _scc_state_CDCT_S26; break;
		}




		case _scc_state_CDCT_S26: {
		    r_alu = r_ram1 + r_ram2;
		    _scc_state_register = _scc_state_CDCT_S27; break;
		}




		case _scc_state_CDCT_S27: {
		    r_sh = ((r_alu) << (2));
		    r_alu = r_ram1 - r_ram2;
		    _scc_state_register = _scc_state_CDCT_S28; break;
		}




		case _scc_state_CDCT_S28: {
		    rf[5] = r_sh;
		    r_sh = ((r_alu) << (2));
		    _scc_state_register = _scc_state_CDCT_S29; break;
		}




		case _scc_state_CDCT_S29: {
		    rf[10] = r_sh;
		    r_alu = rf[2] + rf[5];
		    _scc_state_register = _scc_state_CDCT_S30; break;
		}




		case _scc_state_CDCT_S30: {
		    rf[6] = r_alu;
		    r_alu = rf[3] + rf[4];
		    _scc_state_register = _scc_state_CDCT_S31; break;
		}




		case _scc_state_CDCT_S31: {
		    rf[7] = r_alu;
		    r_alu = rf[3] - rf[4];
		    _scc_state_register = _scc_state_CDCT_S32; break;
		}



		case _scc_state_CDCT_S32: {
		    rf[8] = r_alu;
		    r_alu = rf[2] - rf[5];
		    _scc_state_register = _scc_state_CDCT_S33; break;
		}



		case _scc_state_CDCT_S33: {
		    rf[9] = r_alu;
		    _scc_state_register = _scc_state_CDCT_S34; break;
		}



		case _scc_state_CDCT_S34: {
		    rf[0] = i;
		    _scc_state_register = _scc_state_CDCT_S35; break;
		}




		case _scc_state_CDCT_S35: {
		    r_alu = rf[6] + rf[7];
		    _scc_state_register = _scc_state_CDCT_S36; break;
		}




		case _scc_state_CDCT_S36: {
		    r_mul = 362 * r_alu;
		    r_alu = rf[6] - rf[7];
		    _scc_state_register = _scc_state_CDCT_S37; break;
		}




		case _scc_state_CDCT_S37: {
		    r_sh = ((r_mul) >> (9));
		    r_mul = 362 * r_alu;
		    _scc_state_register = _scc_state_CDCT_S38; break;
		}




		case _scc_state_CDCT_S38: {
		    DData[rf[0]] = r_sh;
		    r_sh = ((r_mul) >> (9));
		    _scc_state_register = _scc_state_CDCT_S39; break;
		}




		case _scc_state_CDCT_S39: {
		    r_alu = i + 32;
		    _scc_state_register = _scc_state_CDCT_S40; break;
		}




		case _scc_state_CDCT_S40: {
		    DData[r_alu] = r_sh;
		    _scc_state_register = _scc_state_CDCT_S41; break;
		}




		case _scc_state_CDCT_S41: {
		    r_mul = 196 * rf[8];
		    _scc_state_register = _scc_state_CDCT_S42; break;
		}




		case _scc_state_CDCT_S42: {
		    rf[15] = r_mul;
		    r_mul = 473 * rf[9];
		    _scc_state_register = _scc_state_CDCT_S43; break;
		}




		case _scc_state_CDCT_S43: {
		    r_alu = r_mul + rf[15];
		    r_mul = 196 * rf[9];
		    _scc_state_register = _scc_state_CDCT_S44; break;
		}




		case _scc_state_CDCT_S44: {
		    r_sh = ((r_alu) >> (9));
		    rf[14] = r_mul;
		    r_mul = 473 * rf[8];
		    _scc_state_register = _scc_state_CDCT_S45; break;
		}




		case _scc_state_CDCT_S45: {
		    rf[15] = r_sh;
		    r_alu = rf[14] - r_mul;
		    _scc_state_register = _scc_state_CDCT_S46; break;
		}




		case _scc_state_CDCT_S46: {
		    r_sh = ((r_alu) >> (9));
		    r_alu = i + 16;
		    _scc_state_register = _scc_state_CDCT_S47; break;
		}

#line 471 "./dct.sc"
		case _scc_state_CDCT_S47: {
		    DData[r_alu] = rf[15];
		    r_alu = i + 48;
		    _scc_state_register = _scc_state_CDCT_S48; break;
		}




		case _scc_state_CDCT_S48: {
		    DData[r_alu] = r_sh;
		    _scc_state_register = _scc_state_CDCT_S49; break;
		}




		case _scc_state_CDCT_S49: {
		    r_alu = rf[12] - rf[11];
		    _scc_state_register = _scc_state_CDCT_S50; break;
		}




		case _scc_state_CDCT_S50: {
		    r_mul = r_alu * 362;
		    r_alu = rf[12] + rf[11];
		    _scc_state_register = _scc_state_CDCT_S51; break;
		}




		case _scc_state_CDCT_S51: {
		    r_sh = ((r_mul) >> (9));
		    r_mul = r_alu * 362;
		    _scc_state_register = _scc_state_CDCT_S52; break;
		}




		case _scc_state_CDCT_S52: {
		    rf[6] = r_sh;
		    r_sh = ((r_mul) >> (9));
		    _scc_state_register = _scc_state_CDCT_S53; break;
		}




		case _scc_state_CDCT_S53: {
		    rf[7] = r_sh;
		    r_alu = rf[10] + rf[6];
		    _scc_state_register = _scc_state_CDCT_S54; break;
		}




		case _scc_state_CDCT_S54: {
		    rf[2] = r_alu;
		    r_alu = rf[10] - rf[6];
		    _scc_state_register = _scc_state_CDCT_S55; break;
		}




		case _scc_state_CDCT_S55: {
		    rf[3] = r_alu;
		    r_alu = rf[13] - rf[7];
		    _scc_state_register = _scc_state_CDCT_S56; break;
		}




		case _scc_state_CDCT_S56: {
		    rf[4] = r_alu;
		    r_alu = rf[13] + rf[7];
		    _scc_state_register = _scc_state_CDCT_S57; break;
		}




		case _scc_state_CDCT_S57: {
		    rf[5] = r_alu;
		    r_mul = 100 * rf[2];
		    _scc_state_register = _scc_state_CDCT_S58; break;
		}

#line 571 "./dct.sc"
		case _scc_state_CDCT_S58: {
		    rf[15] = r_mul;
		    r_mul = 502 * rf[5];
		    _scc_state_register = _scc_state_CDCT_S59; break;
		}




		case _scc_state_CDCT_S59: {
		    r_alu = r_mul + rf[15];
		    r_mul = 426 * rf[4];
		    _scc_state_register = _scc_state_CDCT_S60; break;
		}




		case _scc_state_CDCT_S60: {
		    r_sh = ((r_alu) >> (9));
		    rf[14] = r_mul;
		    r_mul = 284 * rf[3];
		    _scc_state_register = _scc_state_CDCT_S61; break;
		}




		case _scc_state_CDCT_S61: {
		    rf[15] = r_sh;
		    r_alu = rf[14] - r_mul;
		    _scc_state_register = _scc_state_CDCT_S62; break;
		}




		case _scc_state_CDCT_S62: {
		    r_sh = ((r_alu) >> (9));
		    r_alu = i + 8;
		    _scc_state_register = _scc_state_CDCT_S63; break;
		}

#line 618 "./dct.sc"
		case _scc_state_CDCT_S63: {
		    DData[r_alu] = rf[15];
		    r_alu = i + 24;
		    _scc_state_register = _scc_state_CDCT_S64; break;
		}




		case _scc_state_CDCT_S64: {
		    DData[r_alu] = r_sh;
		    r_mul = 426 * rf[3];
		    _scc_state_register = _scc_state_CDCT_S65; break;
		}

#line 638 "./dct.sc"
		case _scc_state_CDCT_S65: {
		    rf[15] = r_mul;
		    r_mul = 284 * rf[4];
		    _scc_state_register = _scc_state_CDCT_S66; break;
		}




		case _scc_state_CDCT_S66: {
		    r_alu = r_mul + rf[15];
		    r_mul = 100 * rf[5];
		    _scc_state_register = _scc_state_CDCT_S67; break;
		}




		case _scc_state_CDCT_S67: {
		    r_sh = ((r_alu) >> (9));
		    rf[14] = r_mul;
		    r_mul = 502 * rf[2];
		    _scc_state_register = _scc_state_CDCT_S68; break;
		}




		case _scc_state_CDCT_S68: {
		    rf[15] = r_sh;
		    r_alu = rf[14] - r_mul;
		    _scc_state_register = _scc_state_CDCT_S69; break;
		}




		case _scc_state_CDCT_S69: {
		    r_sh = ((r_alu) >> (9));
		    r_alu = i + 40;
		    _scc_state_register = _scc_state_CDCT_S70; break;
		}




		case _scc_state_CDCT_S70: {
		    DData[r_alu] = rf[15];
		    r_alu = i + 56;
		    _scc_state_register = _scc_state_CDCT_S71; break;
		}




		case _scc_state_CDCT_S71: {
		    DData[r_alu] = r_sh;
		    i = i + 1;
		    _scc_state_register = _scc_state_CDCT_S1; break;
		}




		case _scc_state_CDCT_S72: {
		    i = 0;
		    _scc_state_register = _scc_state_CDCT_S73; break;
		}




		case _scc_state_CDCT_S73: {
		    if (i < 8)
			_scc_state_register = _scc_state_CDCT_S74;
		    else 
			_scc_state_register = _scc_state_CDCT_S139; break;
		}




		case _scc_state_CDCT_S74: {
		    r_sh = ((i) << (3));
		    _scc_state_register = _scc_state_CDCT_S75; break;
		}




		case _scc_state_CDCT_S75: {
		    j = r_sh;
		    r_alu = r_sh + 7;
		    _scc_state_register = _scc_state_CDCT_S76; break;
		}




		case _scc_state_CDCT_S76: {
		    k = r_alu;
		    _scc_state_register = _scc_state_CDCT_S77; break;
		}




		case _scc_state_CDCT_S77: {
		    r_ram1 = DData[j];
		    r_ram2 = DData[k];
		    _scc_state_register = _scc_state_CDCT_S78; break;
		}




		case _scc_state_CDCT_S78: {
		    r_alu = r_ram1 - r_ram2;
		    _scc_state_register = _scc_state_CDCT_S79; break;
		}




		case _scc_state_CDCT_S79: {
		    r_sh = ((r_alu) >> (1));
		    r_alu = r_ram1 + r_ram2;
		    j = j + 1;
		    k = k - 1;
		    _scc_state_register = _scc_state_CDCT_S80; break;
		}




		case _scc_state_CDCT_S80: {
		    rf[13] = r_sh;
		    r_sh = ((r_alu) >> (1));
		    _scc_state_register = _scc_state_CDCT_S81; break;
		}




		case _scc_state_CDCT_S81: {
		    rf[2] = r_sh;
		    _scc_state_register = _scc_state_CDCT_S82; break;
		}

#line 792 "./dct.sc"
		case _scc_state_CDCT_S82: {
		    r_ram1 = DData[j];
		    r_ram2 = DData[k];
		    _scc_state_register = _scc_state_CDCT_S83; break;
		}




		case _scc_state_CDCT_S83: {
		    r_alu = r_ram1 - r_ram2;
		    _scc_state_register = _scc_state_CDCT_S84; break;
		}




		case _scc_state_CDCT_S84: {
		    r_sh = ((r_alu) >> (1));
		    r_alu = r_ram1 + r_ram2;
		    j = j + 1;
		    k = k - 1;
		    _scc_state_register = _scc_state_CDCT_S85; break;
		}




		case _scc_state_CDCT_S85: {
		    rf[12] = r_sh;
		    r_sh = ((r_alu) >> (1));
		    _scc_state_register = _scc_state_CDCT_S86; break;
		}




		case _scc_state_CDCT_S86: {
		    rf[3] = r_sh;
		    _scc_state_register = _scc_state_CDCT_S87; break;
		}

#line 838 "./dct.sc"
		case _scc_state_CDCT_S87: {
		    r_ram1 = DData[j];
		    r_ram2 = DData[k];
		    _scc_state_register = _scc_state_CDCT_S88; break;
		}




		case _scc_state_CDCT_S88: {
		    r_alu = r_ram1 - r_ram2;
		    _scc_state_register = _scc_state_CDCT_S89; break;
		}




		case _scc_state_CDCT_S89: {
		    r_sh = ((r_alu) >> (1));
		    r_alu = r_ram1 + r_ram2;
		    j = j + 1;
		    k = k - 1;
		    _scc_state_register = _scc_state_CDCT_S90; break;
		}




		case _scc_state_CDCT_S90: {
		    rf[11] = r_sh;
		    r_sh = ((r_alu) >> (1));
		    _scc_state_register = _scc_state_CDCT_S91; break;
		}




		case _scc_state_CDCT_S91: {
		    rf[4] = r_sh;
		    _scc_state_register = _scc_state_CDCT_S92; break;
		}




		case _scc_state_CDCT_S92: {
		    r_ram1 = DData[j];
		    r_ram2 = DData[k];
		    _scc_state_register = _scc_state_CDCT_S93; break;
		}




		case _scc_state_CDCT_S93: {
		    r_alu = r_ram1 - r_ram2;
		    _scc_state_register = _scc_state_CDCT_S94; break;
		}




		case _scc_state_CDCT_S94: {
		    r_sh = ((r_alu) >> (1));
		    r_alu = r_ram1 + r_ram2;
		    j = j + 1;
		    k = k - 1;
		    _scc_state_register = _scc_state_CDCT_S95; break;
		}




		case _scc_state_CDCT_S95: {
		    rf[10] = r_sh;
		    r_sh = ((r_alu) >> (1));
		    _scc_state_register = _scc_state_CDCT_S96; break;
		}




		case _scc_state_CDCT_S96: {
		    rf[5] = r_sh;
		    r_alu = rf[2] + r_sh;
		    _scc_state_register = _scc_state_CDCT_S97; break;
		}




		case _scc_state_CDCT_S97: {
		    rf[6] = r_alu;
		    r_alu = rf[3] + rf[4];
		    _scc_state_register = _scc_state_CDCT_S98; break;
		}

#line 939 "./dct.sc"
		case _scc_state_CDCT_S98: {
		    rf[7] = r_alu;
		    r_alu = rf[3] - rf[4];
		    _scc_state_register = _scc_state_CDCT_S99; break;
		}




		case _scc_state_CDCT_S99: {
		    rf[8] = r_alu;
		    r_alu = rf[2] - rf[5];
		    _scc_state_register = _scc_state_CDCT_S100; break;
		}

#line 958 "./dct.sc"
		case _scc_state_CDCT_S100: {
		    rf[9] = r_alu;
		    r_sh = ((i) << (3));
		    _scc_state_register = _scc_state_CDCT_S101; break;
		}




		case _scc_state_CDCT_S101: {
		    rf[0] = r_sh;
		    _scc_state_register = _scc_state_CDCT_S102; break;
		}




		case _scc_state_CDCT_S102: {
		    r_alu = rf[6] + rf[7];
		    _scc_state_register = _scc_state_CDCT_S103; break;
		}




		case _scc_state_CDCT_S103: {
		    r_mul = 362 * r_alu;
		    r_alu = rf[6] - rf[7];
		    _scc_state_register = _scc_state_CDCT_S104; break;
		}




		case _scc_state_CDCT_S104: {
		    r_sh = ((r_mul) >> (9));
		    r_mul = 362 * r_alu;
		    _scc_state_register = _scc_state_CDCT_S105; break;
		}

#line 1002 "./dct.sc"
		case _scc_state_CDCT_S105: {
		    DData[rf[0]] = r_sh;
		    r_sh = ((r_mul) >> (9));
		    _scc_state_register = _scc_state_CDCT_S106; break;
		}




		case _scc_state_CDCT_S106: {
		    r_alu = rf[0] + 4;
		    _scc_state_register = _scc_state_CDCT_S107; break;
		}




		case _scc_state_CDCT_S107: {
		    DData[r_alu] = r_sh;
		    _scc_state_register = _scc_state_CDCT_S108; break;
		}




		case _scc_state_CDCT_S108: {
		    r_mul = 196 * rf[8];
		    _scc_state_register = _scc_state_CDCT_S109; break;
		}




		case _scc_state_CDCT_S109: {
		    rf[15] = r_mul;
		    r_mul = 473 * rf[9];
		    _scc_state_register = _scc_state_CDCT_S110; break;
		}




		case _scc_state_CDCT_S110: {
		    r_alu = r_mul + rf[15];
		    r_mul = 196 * rf[9];
		    _scc_state_register = _scc_state_CDCT_S111; break;
		}




		case _scc_state_CDCT_S111: {
		    r_sh = ((r_alu) >> (9));
		    rf[14] = r_mul;
		    r_mul = 473 * rf[8];
		    _scc_state_register = _scc_state_CDCT_S112; break;
		}




		case _scc_state_CDCT_S112: {
		    rf[15] = r_sh;
		    r_alu = rf[14] - r_mul;
		    _scc_state_register = _scc_state_CDCT_S113; break;
		}




		case _scc_state_CDCT_S113: {
		    r_sh = ((r_alu) >> (9));
		    r_alu = rf[0] + 2;
		    _scc_state_register = _scc_state_CDCT_S114; break;
		}

#line 1082 "./dct.sc"
		case _scc_state_CDCT_S114: {
		    DData[r_alu] = rf[15];
		    r_alu = rf[0] + 6;
		    _scc_state_register = _scc_state_CDCT_S115; break;
		}




		case _scc_state_CDCT_S115: {
		    DData[r_alu] = r_sh;
		    _scc_state_register = _scc_state_CDCT_S116; break;
		}

#line 1100 "./dct.sc"
		case _scc_state_CDCT_S116: {
		    r_alu = rf[12] - rf[11];
		    _scc_state_register = _scc_state_CDCT_S117; break;
		}




		case _scc_state_CDCT_S117: {
		    r_mul = r_alu * 362;
		    r_alu = rf[12] + rf[11];
		    _scc_state_register = _scc_state_CDCT_S118; break;
		}




		case _scc_state_CDCT_S118: {
		    r_sh = ((r_mul) >> (9));
		    r_mul = r_alu * 362;
		    _scc_state_register = _scc_state_CDCT_S119; break;
		}




		case _scc_state_CDCT_S119: {
		    rf[6] = r_sh;
		    r_sh = ((r_mul) >> (9));
		    _scc_state_register = _scc_state_CDCT_S120; break;
		}




		case _scc_state_CDCT_S120: {
		    rf[7] = r_sh;
		    r_alu = rf[10] + rf[6];
		    _scc_state_register = _scc_state_CDCT_S121; break;
		}




		case _scc_state_CDCT_S121: {
		    rf[2] = r_alu;
		    r_alu = rf[10] - rf[6];
		    _scc_state_register = _scc_state_CDCT_S122; break;
		}




		case _scc_state_CDCT_S122: {
		    rf[3] = r_alu;
		    r_alu = rf[13] - rf[7];
		    _scc_state_register = _scc_state_CDCT_S123; break;
		}




		case _scc_state_CDCT_S123: {
		    rf[4] = r_alu;
		    r_alu = rf[13] + rf[7];
		    _scc_state_register = _scc_state_CDCT_S124; break;
		}




		case _scc_state_CDCT_S124: {
		    rf[5] = r_alu;
		    r_mul = 100 * rf[2];
		    _scc_state_register = _scc_state_CDCT_S125; break;
		}




		case _scc_state_CDCT_S125: {
		    rf[15] = r_mul;
		    r_mul = 502 * rf[5];
		    _scc_state_register = _scc_state_CDCT_S126; break;
		}




		case _scc_state_CDCT_S126: {
		    r_alu = r_mul + rf[15];
		    r_mul = 426 * rf[4];
		    _scc_state_register = _scc_state_CDCT_S127; break;
		}




		case _scc_state_CDCT_S127: {
		    r_sh = ((r_alu) >> (9));
		    rf[14] = r_mul;
		    r_mul = 284 * rf[3];
		    _scc_state_register = _scc_state_CDCT_S128; break;
		}




		case _scc_state_CDCT_S128: {
		    rf[15] = r_sh;
		    r_alu = rf[14] - r_mul;
		    _scc_state_register = _scc_state_CDCT_S129; break;
		}




		case _scc_state_CDCT_S129: {
		    r_sh = ((r_alu) >> (9));
		    r_alu = rf[0] + 1;
		    _scc_state_register = _scc_state_CDCT_S130; break;
		}




		case _scc_state_CDCT_S130: {
		    DData[r_alu] = rf[15];
		    r_alu = rf[0] + 3;
		    _scc_state_register = _scc_state_CDCT_S131; break;
		}




		case _scc_state_CDCT_S131: {
		    DData[r_alu] = r_sh;
		    r_mul = 426 * rf[3];
		    _scc_state_register = _scc_state_CDCT_S132; break;
		}

#line 1246 "./dct.sc"
		case _scc_state_CDCT_S132: {
		    rf[15] = r_mul;
		    r_mul = 284 * rf[4];
		    _scc_state_register = _scc_state_CDCT_S133; break;
		}




		case _scc_state_CDCT_S133: {
		    r_alu = r_mul + rf[15];
		    r_mul = 100 * rf[5];
		    _scc_state_register = _scc_state_CDCT_S134; break;
		}




		case _scc_state_CDCT_S134: {
		    r_sh = ((r_alu) >> (9));
		    rf[14] = r_mul;
		    r_mul = 502 * rf[2];
		    _scc_state_register = _scc_state_CDCT_S135; break;
		}




		case _scc_state_CDCT_S135: {
		    rf[15] = r_sh;
		    r_alu = rf[14] - r_mul;
		    _scc_state_register = _scc_state_CDCT_S136; break;
		}




		case _scc_state_CDCT_S136: {
		    r_sh = ((r_alu) >> (9));
		    r_alu = rf[0] + 5;
		    _scc_state_register = _scc_state_CDCT_S137; break;
		}




		case _scc_state_CDCT_S137: {
		    DData[r_alu] = rf[15];
		    r_alu = rf[0] + 7;
		    _scc_state_register = _scc_state_CDCT_S138; break;
		}




		case _scc_state_CDCT_S138: {
		    DData[r_alu] = r_sh;
		    i = i + 1;
		    _scc_state_register = _scc_state_CDCT_S73; break;
		}




		case _scc_state_CDCT_S139: {
		    i = 0;
		    _scc_state_register = _scc_state_CDCT_S140; break;
		}




		case _scc_state_CDCT_S140: {
		    if (i < 64)
			_scc_state_register = _scc_state_CDCT_S141;
		    else 
			_scc_state_register = _scc_state_BD_S0; break;
		}




		case _scc_state_CDCT_S141: {
		    r_ram1 = DData[i];
		    _scc_state_register = _scc_state_CDCT_S142; break;
		}

#line 1337 "./dct.sc"
		case _scc_state_CDCT_S142: {
		    if (r_ram1 < 0)
			_scc_state_register = _scc_state_CDCT_S146;
		    else 
			_scc_state_register = _scc_state_CDCT_S147; break;
		}




		case _scc_state_CDCT_S146: {
		    r_alu = r_ram1 - 4;
		    _scc_state_register = _scc_state_CDCT_S143; break;
		}




		case _scc_state_CDCT_S147: {
		    r_alu = r_ram1 + 4;
		    _scc_state_register = _scc_state_CDCT_S143; break;
		}

#line 1364 "./dct.sc"
		case _scc_state_CDCT_S143: {
		    r_div = r_alu / 8;
		    _scc_state_register = _scc_state_CDCT_S144; break;
		}




		case _scc_state_CDCT_S144: {
		    DData[i] = r_div;
		    i = i + 1;
		    _scc_state_register = _scc_state_CDCT_S140; break;
		}




		case _scc_state_BD_S0: {
		    i = 0;
		    _scc_state_register = _scc_state_BD_S1; break;
		}




		case _scc_state_BD_S1: {
		    if (i < 64)
			_scc_state_register = _scc_state_BD_S2;
		    else 
			_scc_state_register = _scc_state_CDCT_S145; break;
		}




		case _scc_state_BD_S2: {
		    r_ram1 = DData[i];
		    _scc_state_register = _scc_state_BD_S3; break;
		}




		case _scc_state_BD_S3: {
		    if (r_ram1 <  -1023) _scc_state_register = _scc_state_BD_S4;
		    else  _scc_state_register = _scc_state_BD_S5; break;
		}




		case _scc_state_BD_S4: {
		    DData[i] =  -1023;
		    i = i + 1;
		    _scc_state_register = _scc_state_BD_S1; break;
		}




		case _scc_state_BD_S5: {
		    if (r_ram1 > 1023) _scc_state_register = _scc_state_BD_S6;
		    else  _scc_state_register = _scc_state_BD_S7; break;
		}




		case _scc_state_BD_S6: {
		    DData[i] = 1023;
		    _scc_state_register = _scc_state_BD_S7; break;
		}




		case _scc_state_BD_S7: {
		    i = i + 1;
		    _scc_state_register = _scc_state_BD_S1; break;
		}




		case _scc_state_CDCT_S145: {
		    i = 0;
		    _scc_state_register = _scc_state_break; break;
		} default: break; // never reached
	    } } 
    }
}

#line 1905 "tb.cc"
InitTable::InitTable(const int (&bts)[16], const int (&hvls)[162], struct huffman_standard_structure (&xhuff))
    : bts(bts), hvls(hvls), xhuff(xhuff)
{   /* nothing */
}

InitTable::~InitTable(void)
{   /* nothing */
}

#line 51 "./default.sc"
void InitTable::main(void)
{   
    int i;
    int accum;

    _specc::waitfor((16000));

    for(accum = 0 , i = 0; i < 16; i++ )
    {   
	accum += bts[i];
	xhuff.bits[i + 1] = bts[i];
    }
    for(i = 0; i < accum; i++ )
    {   
	xhuff.huffval[i] = hvls[i];
    }
}

#line 1934 "tb.cc"
SizeTable::SizeTable(struct huffman_standard_structure (&xhuff), int (&huffsize)[257], int (&lastp))
    : xhuff(xhuff), huffsize(huffsize), lastp(lastp)
{   /* nothing */
}

SizeTable::~SizeTable(void)
{   /* nothing */
}

#line 74 "./default.sc"
void SizeTable::main(void)
{   
    int i; int j; int p;

    _specc::waitfor((45000));

    for(p = 0 , i = 1; i < 17; i++ ) {
	for(j = 1; j <= xhuff.bits[i]; j++ ) {
	    huffsize[p++ ] = i;
	}
    }
    huffsize[p] = 0;
    lastp = p;
}

#line 1960 "tb.cc"
CodeTable::CodeTable(int (&huffsize)[257], int (&huffcode)[257])
    : huffsize(huffsize), huffcode(huffcode)
{   /* nothing */
}

CodeTable::~CodeTable(void)
{   /* nothing */
}

#line 93 "./default.sc"
void CodeTable::main(void)
{   
    int code; int p; int size;

    _specc::waitfor((53000));

    p = 0;
    code = 0;
    size = huffsize[0];
    while(1)
    {   
	do  {
	    huffcode[p++ ] = code++ ;
	}
	while((huffsize[p] == size) && (p < 257));
	if ( !huffsize[p]) {
	    break;
	}
	do  {
	    code <<= 1;
	    size++ ;
	}
	while(huffsize[p] != size);
    }
}

#line 1997 "tb.cc"
OrderCodes::OrderCodes(int (&lastp), struct huffman_standard_structure (&xhuff), struct huffman_encoder (&ehuff), int (&huffsize)[257], int (&huffcode)[257])
    : lastp(lastp), xhuff(xhuff), ehuff(ehuff), huffsize(huffsize), huffcode(huffcode)
{   /* nothing */
}

OrderCodes::~OrderCodes(void)
{   /* nothing */
}

#line 124 "./default.sc"
void OrderCodes::main(void)
{   
    int index; int p;

    _specc::waitfor((53000));

    for(p = 0; p < lastp; p++ )
    {   
	index = xhuff.huffval[p];
	ehuff.ehufco[index] = huffcode[p];
	ehuff.ehufsi[index] = huffsize[p];
    }
}

#line 2022 "tb.cc"
SpecifiedHuffman::SpecifiedHuffman(const int (&bts)[16], const int (&hvls)[162], struct huffman_standard_structure (&Xhuff), struct huffman_encoder (&Ehuff))
    : bts(bts), hvls(hvls), Xhuff(Xhuff), Ehuff(Ehuff),
    lastp(0),
    codeTable(huffsize, huffcode),
    initTable(bts, hvls, Xhuff),
    orderCodes(lastp, Xhuff, Ehuff, huffsize, huffcode),
    sizeTable(Xhuff, huffsize, lastp)
{   /* nothing */
}

SpecifiedHuffman::~SpecifiedHuffman(void)
{   /* nothing */
}

#line 152 "./default.sc"
void SpecifiedHuffman::main(void)
{   
    initTable.main();
    sizeTable.main();
    codeTable.main();
    orderCodes.main();
}

#line 2046 "tb.cc"
JpegDefaultHuffman::JpegDefaultHuffman(struct huffman_standard_structure (&DCXhuff), struct huffman_encoder (&DCEhuff), struct huffman_standard_structure (&ACXhuff), struct huffman_encoder (&ACEhuff))
    : DCXhuff(DCXhuff), DCEhuff(DCEhuff), ACXhuff(ACXhuff), ACEhuff(ACEhuff),
    sh1(LuminanceDCBits, LuminanceDCValues, DCXhuff, DCEhuff),
    sh2(LuminanceACBits, LuminanceACValues, ACXhuff, ACEhuff)
{   /* nothing */
}

JpegDefaultHuffman::~JpegDefaultHuffman(void)
{   /* nothing */
}

#line 168 "./default.sc"
void JpegDefaultHuffman::main(void)
{   
    sh1.main();
    sh2.main();
}

#line 2065 "tb.cc"
Design::Design(i_int_receiver (&chHeader), i_byte_receiver (&chPixel), i_byte_sender (&chData))
    : chHeader(chHeader), chPixel(chPixel), chData(chData),
    INTC(bit<1,false>("1")),
    MTAB(bit<1,false>("1")),
    MTSB(bit<1,false>("1")),
    TAB(bit<1,false>("1")),
    TSB(bit<1,false>("1")),
    hw(DB, DBOE, TSB, TAB, MADDR, MRWB, INTC),
    sw(chHeader, chPixel, MWDATA, MRDATA, MTSB, MTAB, MWDATAOE, MADDR, MRWB, INTC, chData),
    t(MWDATA, MRDATA, MTSB, MTAB, MWDATAOE, DB, DBOE, TSB, TAB, MRWB)
{   /* nothing */
}

Design::~Design(void)
{   /* nothing */
}

#line 36 "./design.sc"
void Design::main(void)
{   
    { _specc::fork _scc_fork_0(&sw), _scc_fork_1(&hw), _scc_fork_2(&t); _specc::par(

	    &_scc_fork_0, 
	    &_scc_fork_1, 
	    &_scc_fork_2, ((_specc::fork*)0));
    }
}

#line 2094 "tb.cc"
BHDataSend::BHDataSend(int (&HData)[64], IBusMaster (&bus))
    : HData(HData), bus(bus)
{   /* nothing */
}

BHDataSend::~BHDataSend(void)
{   /* nothing */
}

#line 18 "./encode.sc"
void BHDataSend::main(void)
{   
    bus.sendBlock(HData, 48);
}

#line 2110 "tb.cc"
BDDataRecv::BDDataRecv(IBusMaster (&bus), int (&DData)[64])
    : bus(bus), DData(DData)
{   /* nothing */
}

BDDataRecv::~BDDataRecv(void)
{   /* nothing */
}

#line 27 "./encode.sc"
void BDDataRecv::main(void)
{   
    bus.recvBlock( &DData[0], 64);
}

#line 2126 "tb.cc"
JpegEncodeStripe::JpegEncodeStripe(int (&mduHigh), unsigned char *(&stripe), int (&MDUWide), struct huffman_encoder (&DCEhuff), struct huffman_encoder (&ACEhuff), IBusMaster (&bus), ISendBits (&chData))
    : mduHigh(mduHigh), stripe(stripe), MDUWide(MDUWide), DCEhuff(DCEhuff), ACEhuff(ACEhuff), bus(bus), chData(chData),
    handleData(mduWide, mduHigh, stripe, MDUWide, hdata),
    huffmanEncode(qdata, DCEhuff, ACEhuff, chData),
    quantization(ddata, qdata),
    recvDData(bus, ddata),
    sendHData(hdata, bus)
{   /* nothing */
}

JpegEncodeStripe::~JpegEncodeStripe(void)
{   /* nothing */
}

#line 53 "./encode.sc"
void JpegEncodeStripe::main(void)
{   

#line 76 "./encode.sc"
    for(mduWide = 0; mduWide < MDUWide; mduWide++ )
    {   
	handleData.main();
	sendHData.main();
	recvDData.main();
	quantization.main();
	huffmanEncode.main();
    }
}

#line 2156 "tb.cc"
JpegEncode::JpegEncode(i_byte_receiver (&chPixel), int (&ImageWidth), int (&ImageHeight), struct huffman_encoder (&DCEhuff), struct huffman_encoder (&ACEhuff), IBusMaster (&bus), ISendBits (&chData))
    : chPixel(chPixel), ImageWidth(ImageWidth), ImageHeight(ImageHeight), DCEhuff(DCEhuff), ACEhuff(ACEhuff), bus(bus), chData(chData),
    encodeStripe(mduHigh, stripe, MDUWide, DCEhuff, ACEhuff, bus, chData),
    receiveData(chPixel, mduHigh, ImageWidth, ImageHeight, MDUWide, stripe)
{   /* nothing */
}

JpegEncode::~JpegEncode(void)
{   /* nothing */
}

#line 105 "./encode.sc"
void JpegEncode::main(void)
{   
    for(mduHigh = 0 , MDUHigh = (ImageHeight + 7) >> 3; mduHigh < MDUHigh; mduHigh++ )
    {   
	receiveData.main();
	encodeStripe.main();
    }
}

#line 2178 "tb.cc"
ReceiveData::ReceiveData(i_byte_receiver (&chPixel), int (&mduHigh), int (&ImageWidth), int (&ImageHeight), int (&MDUWide), unsigned char *(&stripe))
    : chPixel(chPixel), mduHigh(mduHigh), ImageWidth(ImageWidth), ImageHeight(ImageHeight), MDUWide(MDUWide), stripe(stripe)
{   /* nothing */
}

ReceiveData::~ReceiveData(void)
{   /* nothing */
}

#line 18 "./handle.sc"
void ReceiveData::main(void)
{   
    int MDUs;
    int i; int j;
    char temp;
    unsigned char *buf;


    MDUs = (ImageWidth + 7) >> 3;


    buf = (unsigned char *)calloc(64 * MDUs, sizeof(char));

    _specc::waitfor((71000 * MDUs));


    for(i = 0; i < 8; i++ ) {
	for(j = 0; j < MDUs * 8; j++ ) {
	    if ((j < ImageWidth) && (mduHigh * 8 + i < ImageHeight)) {



		chPixel.receive( &temp);



		buf[i * MDUs * 8 + j] = temp;
	    }
	    else  {
		buf[i * MDUs * 8 + j] = buf[i * MDUs * 8 + ImageWidth - 1];
	    }
	}
    }


    MDUWide = MDUs;
    stripe = buf;
}

#line 2228 "tb.cc"
HandleData::HandleData(int (&mduWide), int (&mduHigh), unsigned char *(&stripe), int (&MDUWide), int (&HData)[64])
    : mduWide(mduWide), mduHigh(mduHigh), stripe(stripe), MDUWide(MDUWide), HData(HData),
    block(0)
{   /* nothing */
}

HandleData::~HandleData(void)
{   /* nothing */
}

#line 66 "./handle.sc"
void HandleData::main(void)
{   
    int i; int j;


    msg("%8s: Processing Block %d (%d,%d)...\n", time2str(now()),  ++
	block, mduWide, mduHigh);

    _specc::waitfor((71000));


    for(i = 0; i < 8; i++ ) {
	for(j = 0; j < 8; j++ ) {
	    HData[i * 8 + j] = stripe[i * MDUWide * 8 + mduWide * 8 + j];
	}
    }

#line 90 "./handle.sc"
    if (mduWide == (MDUWide - 1)) free(stripe);
}

#line 2261 "tb.cc"
JpegHeader::JpegHeader(int (&ImageWidth), int (&ImageHeight), struct huffman_standard_structure (&DCXhuff), struct huffman_standard_structure (&ACXhuff), ISendBits (&chData))
    : ImageWidth(ImageWidth), ImageHeight(ImageHeight), DCXhuff(DCXhuff), ACXhuff(ACXhuff), chData(chData)
{   /* nothing */
}

JpegHeader::~JpegHeader(void)
{   /* nothing */
}

#line 44 "./header.sc"
void JpegHeader::WriteAPP0()
{   
    chData.WriteMarker(224);


    chData.WriteWord(16);


    chData.WriteByte('J');
    chData.WriteByte('F');
    chData.WriteByte('I');
    chData.WriteByte('F');
    chData.WriteByte(0);


    chData.WriteWord(258);


    chData.WriteByte(2);


    chData.WriteWord(29);


    chData.WriteWord(29);


    chData.WriteWord(0);
}

#line 117 "./header.sc"
void JpegHeader::WriteDHT()
{   
    chData.WriteMarker(196);

    chData.WriteWord(4 + 32 + 12 + 162);



    chData.WriteByte(0);
    WriteHuffman( &DCXhuff);



    chData.WriteByte(16);
    WriteHuffman( &ACXhuff);
}

#line 100 "./header.sc"
void JpegHeader::WriteDQT()
{   
    int i;

    chData.WriteMarker(219);


    chData.WriteWord(67);


    chData.WriteByte(0);

    for(i = 0; i < 64; i++ ) {
	chData.WriteByte(QuantizationMatrix[IZigzagIndex[i]]);
    }
}

#line 29 "./header.sc"
void JpegHeader::WriteHuffman(struct huffman_standard_structure *xhuff)
{   
    int accum; int i;

    for(accum = 0 , i = 1; i <= 16; i++ )
    {   
	chData.WriteByte(xhuff->bits[i]);
	accum += xhuff->bits[i];
    }
    for(i = 0; i < accum; i++ )
    {   
	chData.WriteByte(xhuff->huffval[i]);
    }
}

#line 74 "./header.sc"
void JpegHeader::WriteSOF(void)
{   
    chData.WriteMarker(192);


    chData.WriteWord(11);


    chData.WriteByte(8);


    chData.WriteWord(ImageHeight);
    chData.WriteWord(ImageWidth);


    chData.WriteByte(1);



    chData.WriteByte(1);

    chData.WriteByte(17);

    chData.WriteByte(0);
}

#line 134 "./header.sc"
void JpegHeader::WriteSOS()
{   
    chData.WriteMarker(218);


    chData.WriteWord(8);


    chData.WriteByte(1);


    chData.WriteByte(1);


    chData.WriteByte(0);


    chData.WriteByte(0);


    chData.WriteByte(63);


    chData.WriteByte(0);
}


void JpegHeader::main(void)
{   




    chData.WriteMarker(216);
    WriteAPP0();
    WriteSOF();
    WriteDQT();
    WriteDHT();
    WriteSOS();
}

#line 2423 "tb.cc"
ZigzagMatrix::ZigzagMatrix(int (&imatrix)[64], int (&omatrix)[64])
    : imatrix(imatrix), omatrix(omatrix)
{   /* nothing */
}

ZigzagMatrix::~ZigzagMatrix(void)
{   /* nothing */
}

#line 119 "./huff.sc"
void ZigzagMatrix::main(void)
{   
    int i; int z;

    _specc::waitfor((12000));

#line 135 "./huff.sc"
    for(i = 0; i < 64; i++ ) {
	z = ZigzagIndex[i];
	omatrix[z] = imatrix[i];
    }
}

#line 2447 "tb.cc"
EncodeDC::EncodeDC(int (&matrix)[64], struct huffman_encoder (&Ehuff), ISendBits (&chData))
    : matrix(matrix), Ehuff(Ehuff), chData(chData),
    LastDC(0)
{   /* nothing */
}

EncodeDC::~EncodeDC(void)
{   /* nothing */
}

#line 150 "./huff.sc"
void EncodeDC::main(void)
{   
    int coef; int cofac; int diff; int s;

    _specc::waitfor((12000));

#line 161 "./huff.sc"
    coef = matrix[0];

    diff = coef - LastDC;
    LastDC = coef;
    cofac = abs(diff);
    if (cofac < 256) {
	s = csize[cofac];
    }
    else  {
	cofac = cofac >> 8;
	s = csize[cofac] + 8;
    }

    EncodeHuffman( &Ehuff, s, chData);
    if (diff < 0) {
	diff-- ;
    }

    chData.WriteBits(s, diff);
}

#line 2487 "tb.cc"
EncodeAC::EncodeAC(int (&matrix)[64], struct huffman_encoder (&Ehuff), ISendBits (&chData))
    : matrix(matrix), Ehuff(Ehuff), chData(chData)
{   /* nothing */
}

EncodeAC::~EncodeAC(void)
{   /* nothing */
}

#line 187 "./huff.sc"
void EncodeAC::main(void)
{   
    int cofac; int i; int k; int r; int ssss;

    _specc::waitfor((138000));

#line 198 "./huff.sc"
    for(k = r = 0;  ++k < 64; )
    {   
	cofac = abs(matrix[k]);
	if (cofac < 256) {
	    ssss = csize[cofac];
	}
	else  {
	    cofac = cofac >> 8;
	    ssss = csize[cofac] + 8;
	}

	if (matrix[k] == 0) {
	    if (k == 64 - 1) {
		EncodeHuffman( &Ehuff, 0, chData);
		break;
	    }
	    r++ ;
	}
	else  {
	    while(r > 15) {
		EncodeHuffman( &Ehuff, 240, chData);
		r -= 16;
	    }
	    i = 16 * r + ssss;
	    r = 0;
	    EncodeHuffman( &Ehuff, i, chData);
	    if (matrix[k] < 0)
		chData.WriteBits(ssss, matrix[k] - 1);
	    else 
		chData.WriteBits(ssss, matrix[k]);
	}
    }
}

#line 2539 "tb.cc"
HuffmanEncode::HuffmanEncode(int (&QData)[64], struct huffman_encoder (&DCEhuff), struct huffman_encoder (&ACEhuff), ISendBits (&chData))
    : QData(QData), DCEhuff(DCEhuff), ACEhuff(ACEhuff), chData(chData),
    encodeAC(OData, ACEhuff, chData),
    encodeDC(OData, DCEhuff, chData),
    zigzagMatrix(QData, OData)
{   /* nothing */
}

HuffmanEncode::~HuffmanEncode(void)
{   /* nothing */
}

#line 244 "./huff.sc"
void HuffmanEncode::main(void) {
    zigzagMatrix.main();
    encodeDC.main();
    encodeAC.main();
}

#line 2559 "tb.cc"
BHDataRecv::BHDataRecv(IBusSlave (&bus), int (&HData)[64])
    : bus(bus), HData(HData)
{   /* nothing */
}

BHDataRecv::~BHDataRecv(void)
{   /* nothing */
}

#line 15 "./hw.sc"
void BHDataRecv::main(void)
{   
    bus.recvBlock( &HData[0], 48);
}

#line 2575 "tb.cc"
BDDataSend::BDDataSend(int (&DData)[64], IBusSlave (&bus))
    : DData(DData), bus(bus)
{   /* nothing */
}

BDDataSend::~BDDataSend(void)
{   /* nothing */
}

#line 24 "./hw.sc"
void BDDataSend::main(void)
{   
    bus.sendBlock(DData, 64);
}

#line 2591 "tb.cc"
DctHW::DctHW(IBusSlave (&bus))
    : bus(bus),
    dct(HData, DData),
    recvHData(bus, HData),
    sendDData(DData, bus)
{   /* nothing */
}

DctHW::~DctHW(void)
{   /* nothing */
}

#line 78 "./hw.sc"
void DctHW::main(void)
{   
    recvHData.main();

    dct.main();

    sendDData.main();
}

#line 2614 "tb.cc"
HW::HW(_specc::signal<bit<_BITLEN(31,0),false> > (&DB), _specc::signal<bit<_BITLEN(0,0),false> > (&DBOE), _specc::signal<bit<_BITLEN(0,0),false> > (&TSB), _specc::signal<bit<_BITLEN(0,0),false> > (&TAB), _specc::signal<bit<_BITLEN(31,0),false> > (&MADDR), _specc::signal<bit<_BITLEN(0,0),false> > (&MRWB), _specc::signal<bit<_BITLEN(0,0),false> > (&INTC))
    : DB(DB), DBOE(DBOE), TSB(TSB), TAB(TAB), MADDR(MADDR), MRWB(MRWB), INTC(INTC),
    bus(DB, DBOE, TSB, TAB, MADDR, MRWB, INTC),
    dctHW(bus)
{   /* nothing */
}

HW::~HW(void)
{   /* nothing */
}

#line 103 "./hw.sc"
void HW::main(void)
{   
    { _specc::fork _scc_fork_0(&dctHW); _specc::pipe(
	    &_scc_fork_0, ((_specc::fork*)0), ((void*)0));
    }
}

#line 2634 "tb.cc"
Input::Input(char *(&ifname), i_int_sender (&Header), i_byte_sender (&Pixel))
    : ifname(ifname), Header(Header), Pixel(Pixel)
{   /* nothing */
}

Input::~Input(void)
{   /* nothing */
}

#line 113 "./io.sc"
int Input::IsBmpFile()
{   
    int t = 16973;
    int c;
    c = ReadWord();
    fseek(ifp,  -2, 1);

    return t == c;
}

void Input::ReadBmpHeader()
{   
    int count; int i;

    if ( !IsBmpFile()) {
	error("This file is not compatible with BMP format.\n");
    }


    BmpFileHeader.bfType = ReadWord();
    BmpFileHeader.bfSize = ReadRevDWord();
    BmpFileHeader.bfReserved1 = ReadRevWord();
    BmpFileHeader.bfReserved2 = ReadRevWord();
    BmpFileHeader.bfOffBits = ReadRevDWord();


    BmpInfoHeader.biSize = ReadRevDWord();
    BmpInfoHeader.biWidth = ReadRevDWord();
    BmpInfoHeader.biHeight = ReadRevDWord();
    BmpInfoHeader.biPlanes = ReadRevWord();
    BmpInfoHeader.biBitCount = ReadRevWord();

    if (BmpInfoHeader.biSize > 12) {
	BmpInfoHeader.biCompression = ReadRevDWord();
	BmpInfoHeader.biSizeImage = ReadRevDWord();
	BmpInfoHeader.biXPelsPerMeter = ReadRevDWord();
	BmpInfoHeader.biYPelsPerMeter = ReadRevDWord();
	BmpInfoHeader.biClrUsed = ReadRevDWord();
	BmpInfoHeader.biClrImportant = ReadRevDWord();


	count = BmpFileHeader.bfOffBits - ftell(ifp);
	count >>= 2;

	BmpColors = (struct tagRGBTRIPLE *)calloc(sizeof(struct tagRGBTRIPLE), count);

	for(i = 0; i < count; i++ ) {
	    BmpColors[i].B = ReadByte();
	    BmpColors[i].G = ReadByte();
	    BmpColors[i].R = ReadByte();
	    ReadByte();
	}
    }
    else  {

	count = BmpFileHeader.bfOffBits - ftell(ifp);
	count /= 3;

	BmpColors = (struct tagRGBTRIPLE *)calloc(sizeof(struct tagRGBTRIPLE), count);

	for(i = 0; i < count; i++ ) {
	    BmpColors[i].B = ReadByte();
	    BmpColors[i].G = ReadByte();
	    BmpColors[i].R = ReadByte();
	}
    }


    if (BmpInfoHeader.biBitCount == 24) {
	BmpScanWidth = ((BmpInfoHeader.biWidth * 3 + 3) >> 2) << 2;
	BmpScanHeight = BmpInfoHeader.biHeight;
    }
    else  {
	BmpScanWidth = ((BmpInfoHeader.biWidth + 3) >> 2) << 2;
	BmpScanHeight = BmpInfoHeader.biHeight;
    }
}

#line 86 "./io.sc"
int Input::ReadByte()
{   
    return fgetc(ifp);
}

#line 102 "./io.sc"
long int Input::ReadDWord()
{   
    long int c;
    c = fgetc(ifp) << 24;
    c |= fgetc(ifp) << 16;
    c |= fgetc(ifp) << 8;
    c |= fgetc(ifp);

    return c;
}

#line 91 "./io.sc"
long int Input::ReadRevDWord()
{   
    long int c;
    c = fgetc(ifp);
    c |= fgetc(ifp) << 8;
    c |= fgetc(ifp) << 16;
    c |= fgetc(ifp) << 24;

    return c;
}

#line 68 "./io.sc"
int Input::ReadRevWord()
{   
    int c;
    c = fgetc(ifp);
    c |= fgetc(ifp) << 8;

    return c;
}

int Input::ReadWord()
{   
    int c;
    c = fgetc(ifp) << 8;
    c |= fgetc(ifp);

    return c;
}

#line 192 "./io.sc"
void Input::main(void)
{   
    int c; int r;
    char buf;


    ifp = fopen(ifname, "rb");
    if ( !ifp) {
	error("Cannot open input file %s\n", ifname);
    }


    ReadBmpHeader();

#line 211 "./io.sc"
    Header.send(BmpInfoHeader.biWidth);
    Header.send(BmpInfoHeader.biHeight);

#line 220 "./io.sc"
    for(r = BmpInfoHeader.biHeight - 1; r >= 0; r-- )
    {   

	fseek(ifp, BmpFileHeader.bfOffBits + r * BmpScanWidth, 0);


	for(c = 0; c < BmpInfoHeader.biWidth; c++ ) {

	    if (ferror(ifp) || (fread( &buf, 1, 1, ifp) != 1)) {
		error("Error reading data from file %s\n", ifname);
	    }

#line 237 "./io.sc"
	    Pixel.send(buf);
	}
    }

#line 245 "./io.sc"
    fclose(ifp);
}

#line 2813 "tb.cc"
Output::Output(char *(&ofname), i_byte_receiver (&Data))
    : ofname(ofname), Data(Data)
{   /* nothing */
}

Output::~Output(void)
{   /* nothing */
}

#line 265 "./io.sc"
void Output::main(void)
{   
    bool marker; bool running;
    char buf;


    if (ofname) {
	ofp = fopen(ofname, "wb");
	if ( !ofp) {
	    error("Cannot open output file %s\n", ofname);
	}
    }
    else  {
	ofp = stdOut();
    }


    running = true;
    marker = false;
    while(running)
    {   




	Data.receive( &buf);

#line 296 "./io.sc"
	if ((fwrite( &buf, 1, 1, ofp) != 1) || ferror(ofp)) {
	    error("Error writing to file %s\n", ofname);
	}


	if (marker) {

	    running = ((unsigned char)buf != 217);
	    marker = false;
	}
	else  {
	    marker = ((unsigned char)buf == 255);
	}
    }


    fclose(ofp);


    _specc::waitfor((1000000));
    exit(0);
}

#line 2875 "tb.cc"
JpegStart::JpegStart(i_int_receiver (&chHeader), int (&ImageWidth), int (&ImageHeight))
    : chHeader(chHeader), ImageWidth(ImageWidth), ImageHeight(ImageHeight)
{   /* nothing */
}

JpegStart::~JpegStart(void)
{   /* nothing */
}

#line 20 "./jpeg.sc"
void JpegStart::main(void)
{   
    int height; int width;

#line 28 "./jpeg.sc"
    chHeader.receive( &width);
    chHeader.receive( &height);
    ImageWidth = width;
    ImageHeight = height;

#line 37 "./jpeg.sc"
    msg("****************************************************\n");
    msg("Time %s: JPEG Encoder Begin...\n", time2str(now()));
    msg("****************************************************\n");
}

#line 2902 "tb.cc"
JpegInit::JpegInit(i_int_receiver (&chHeader), ISendBits (&chData), struct huffman_encoder (&DCEhuff), struct huffman_encoder (&ACEhuff), int (&ImageWidth), int (&ImageHeight))
    : chHeader(chHeader), chData(chData), DCEhuff(DCEhuff), ACEhuff(ACEhuff), ImageWidth(ImageWidth), ImageHeight(ImageHeight),
    header(ImageWidth, ImageHeight, DCXhuff, ACXhuff, chData),
    huffman(DCXhuff, DCEhuff, ACXhuff, ACEhuff),
    start(chHeader, ImageWidth, ImageHeight)
{   /* nothing */
}

JpegInit::~JpegInit(void)
{   /* nothing */
}

#line 54 "./jpeg.sc"
void JpegInit::main(void)
{   
    start.main();
    huffman.main();
    header.main();
}

#line 2923 "tb.cc"
JpegEnd::JpegEnd(ISendBits (&chData))
    : chData(chData)
{   /* nothing */
}

JpegEnd::~JpegEnd(void)
{   /* nothing */
}

#line 66 "./jpeg.sc"
void JpegEnd::main(void)
{   
    chData.WriteBits( -1, 0);
    chData.WriteMarker(217);
    msg("****************************************************\n");
    msg("Time %s: JPEG Encoder End...\n", time2str(now()));
    msg("****************************************************\n");
}

#line 2943 "tb.cc"
JpegSW::JpegSW(i_int_receiver (&chHeader), i_byte_receiver (&chPixel), IBusMaster (&bus), i_byte_sender (&chData))
    : chHeader(chHeader), chPixel(chPixel), bus(bus), chData(chData),
    bitAdapter(chData),
    encode(chPixel, imageWidth, imageHeight, DCEhuff, ACEhuff, bus, bitAdapter),
    end(bitAdapter),
    init(chHeader, bitAdapter, DCEhuff, ACEhuff, imageWidth, imageHeight)
{   /* nothing */
}

JpegSW::~JpegSW(void)
{   /* nothing */
}

#line 93 "./jpeg.sc"
void JpegSW::main(void)
{   
    init.main();
    encode.main();
    end.main();
}

#line 2965 "tb.cc"
Quantization::Quantization(int (&DData)[64], int (&QData)[64])
    : DData(DData), QData(QData)
{   /* nothing */
}

Quantization::~Quantization(void)
{   /* nothing */
}

#line 14 "./quant.sc"
void Quantization::main(void)
{   
    int i; int m; int q;

    _specc::waitfor((93000));

    for(i = 0; i < 64; i++ ) {
	m = DData[i];
	q = QuantizationMatrix[i];
	if (m > 0) {
	    QData[i] = (m + q / 2) / q;
	}
	else  {
	    QData[i] = (m - q / 2) / q;
	}
    }
}

#line 2994 "tb.cc"
SW::SW(i_int_receiver (&chHeader), i_byte_receiver (&chPixel), _specc::signal<bit<_BITLEN(31,0),false> > (&MWDATA), _specc::signal<bit<_BITLEN(31,0),false> > (&MRDATA), _specc::signal<bit<_BITLEN(0,0),false> > (&MTSB), _specc::signal<bit<_BITLEN(0,0),false> > (&MTAB), _specc::signal<bit<_BITLEN(0,0),false> > (&MWDATAOE), _specc::signal<bit<_BITLEN(31,0),false> > (&MADDR), _specc::signal<bit<_BITLEN(0,0),false> > (&MRWB), _specc::signal<bit<_BITLEN(0,0),false> > (&INTC), i_byte_sender (&chData))
    : chHeader(chHeader), chPixel(chPixel), MWDATA(MWDATA), MRDATA(MRDATA), MTSB(MTSB), MTAB(MTAB), MWDATAOE(MWDATAOE), MADDR(MADDR), MRWB(MRWB), INTC(INTC), chData(chData),
    bus(MWDATA, MRDATA, MTSB, MTAB, MWDATAOE, MADDR, MRWB, INTC),
    jpegSW(chHeader, chPixel, bus, chData)
{   /* nothing */
}

SW::~SW(void)
{   /* nothing */
}

#line 30 "./sw.sc"
void SW::main(void)
{   
    { _specc::fork _scc_fork_0(&jpegSW); _specc::pipe(
	    &_scc_fork_0, ((_specc::fork*)0), ((void*)0));
    }
}

#line 3014 "tb.cc"
Transducer::Transducer(_specc::signal<bit<_BITLEN(31,0),false> > (&MWDATA), _specc::signal<bit<_BITLEN(31,0),false> > (&MRDATA), _specc::signal<bit<_BITLEN(0,0),false> > (&MTSB), _specc::signal<bit<_BITLEN(0,0),false> > (&MTAB), _specc::signal<bit<_BITLEN(0,0),false> > (&MWDATAOE), _specc::signal<bit<_BITLEN(31,0),false> > (&DB), _specc::signal<bit<_BITLEN(0,0),false> > (&DBOE), _specc::signal<bit<_BITLEN(0,0),false> > (&TSB), _specc::signal<bit<_BITLEN(0,0),false> > (&TAB), _specc::signal<bit<_BITLEN(0,0),false> > (&MRWB))
    : MWDATA(MWDATA), MRDATA(MRDATA), MTSB(MTSB), MTAB(MTAB), MWDATAOE(MWDATAOE), DB(DB), DBOE(DBOE), TSB(TSB), TAB(TAB), MRWB(MRWB)
{   /* nothing */
}

Transducer::~Transducer(void)
{   /* nothing */
}

#line 23 "./transducer.sc"
void Transducer::main(void)
{   
    bit<_BITLEN(31,0),false> data;


    t1: MTAB = 1;
    TSB = 1;

    _specc::wait(falling(&MTSB), ((void*)0));

    if (((MRWB).test()))
    {   

	MTAB = 1;
	TSB = 0;
	_specc::waitfor((4));


	MTAB = 1;
	TSB = 1;
	_specc::waitfor((4));


	_specc::wait(falling(&TAB), ((void*)0));
	MTAB = 1;
	data = ((bit<_BITLEN(31,0),false>)DB);
	_specc::waitfor((4));


	MRDATA = data;
	MTAB = 0;
	_specc::waitfor((4));


	MRDATA = data;
	MTAB = 0;
	_specc::waitfor((4));

	goto t1;
    }
    else 
    {   

	MTAB = 1;
	_specc::waitfor((4));


	while( !((MWDATAOE).test()))
	{   
	    MTAB = 1;
	    _specc::waitfor((4));
	}


	TSB = 0;
	MTAB = 1;
	DBOE = 0;
	data = ((bit<_BITLEN(31,0),false>)MWDATA);
	_specc::waitfor((4));


	TSB = 1;
	MTAB = 1;
	DB = data;
	DBOE = 1;
	_specc::waitfor((4));


	MTAB = 0;
	_specc::waitfor((4));


	MTAB = 0;
	_specc::waitfor((4));

	goto t1;
    }
}

#line 3104 "tb.cc"
Main::Main(void)
    : design(header, pixel, data),
    input(ifname, header, pixel),
    output(ofname, data)
{   /* nothing */
}

Main::~Main(void)
{   /* nothing */
}

#line 25 "tb.sc"
int Main::main(int argc, char **argv)
{   

    if (argc < 2) {
	error("Usage: %s infile [ outfile ]\n", argv[0]);
    }
    ifname = argv[1];
    if (argc >= 3) {
	ofname = argv[2];
    }
    else 

#line 34 "tb.sc"
    {   
	ofname = 0;
    }


    { _specc::fork _scc_fork_0(&input), _scc_fork_1(&design), _scc_fork_2(&output); _specc::par(
	    &_scc_fork_0, 
	    &_scc_fork_1, 
	    &_scc_fork_2, ((_specc::fork*)0));
    }

    return 0;
}

#line 3144 "tb.cc"
Main _scc_main;

int main(int argc, char **argv)
{   
    int _scc_main_return;
    
    _specc::start();
    _scc_main_return = _scc_main.main(argc, argv);
    _specc::end();
    return(_scc_main_return);
}

// function definitions //////////////////////////////////////////////

#line 57 "./huff.sc"
void PrintTable(int *table)
{   
    int i; int j;

    for(i = 0; i < 16; i++ )
    {   
	for(j = 0; j < 16; j++ )
	{   
	    msg("%2x ",  *(table++ ));
	}
	msg("\n");
    }
}

void PrintHuffman(struct huffman_encoder *ehuff, struct huffman_standard_structure *xhuff)
{   
    int i;

    if (xhuff)
    {   
	msg("Bits: [length:number]\n");
	for(i = 1; i < 9; i++ )
	{   
	    msg("[%d:%d]", i, xhuff->bits[i]);
	}
	msg("\n");
	for(i = 9; i < 17; i++ )
	{   
	    msg("[%d:%d]", i, xhuff->bits[i]);
	}
	msg("\n");

	msg("Huffval:\n");
	PrintTable(xhuff->huffval);
    }
    if (ehuff)
    {   
	msg("Ehufco:\n");
	PrintTable(ehuff->ehufco);
	msg("Ehufsi:\n");
	PrintTable(ehuff->ehufsi);
    }
}


void EncodeHuffman(struct huffman_encoder *ehuff, int value, ISendBits (&chData))
{   
    if (ehuff->ehufsi[value]) {
	chData.WriteBits(ehuff->ehufsi[value], ehuff->ehufco[value]);
    }
    else  {
	msg("Null Code for [%d] Encountered:\n", value);
	msg("*** Dumping Huffman Table ***\n");
	PrintHuffman(ehuff, 0);
	msg("***\n");
	exit( -1);
    }
}

//////////////////////////////////////////////////////////////////////
// End of file tb.cc
//////////////////////////////////////////////////////////////////////
