# Copyright (c) 2008 OFFIS e.V., Oldenburg, Germany
# Some rights reserved.
# -------------------------------------------------------------------
# Generic Makefile for OSSS applications
# -------------------------------------------------------------------
#
# This file is part of the OSSS simulation library.
# Copyright (c) 2008 OFFIS e.V. Institute for Information Technology
#
# See the files COPYRIGHT and LICENSE included with the OSSS library
# for copyright and license details. If you have not received these
# files, please contact OFFIS e.V. for further information.
#
# OFFIS e.V.
# Institute for Information Technology
#   Escherweg 2
#   D-26121 Oldenburg
#   Germany
# www  : http://offis.de
# phone: +49 (441) 9722-0
# fax  : +49 (441) 9722-102
# -------------------------------------------------------------------
#
# Author(s): Philipp A. Hartmann, Kim Gruettner
#
# -------------------------------------------------------------------
#
# This file is meant to be included from a specific example
# Makefile, where the appropriate variables are set.
# Especially the $(MODULE) variable is required.
#

#
# Temporarily disable runtime write checks for multiple writers
# This makes the SystemC 2.2 kernel compatible with 2.1.v1
# The check should be reenabled when a new signal implementation exists
#
#SC_SIGNAL_WRITE_CHECK:=DISABLE
#export SC_SIGNAL_WRITE_CHECK

#
# The variable SYSTEMC_HOME has to be set, since we need headers
# and library files of the SystemC simulation library
#
ifeq (,$(strip $(SYSTEMC_HOME)))
$(error SYSTEMC_HOME environment variable not set! Bailing out)
endif

#
# The variable SYSTEMC_LIB has to be set, since we need headers
# and library files of the SystemC simulation library
#
ifeq (,$(strip $(SYSTEMC_LIB)))
$(error SYSTEMC_LIB environment variable not set! Bailing out)
endif

#
# The variable MODULE has to be set, since this determines
# the name of the executable
#
ifndef MODULE
$(error Error: MODULE not set! Bailing out )
else
# Name of the executable
EXE := $(MODULE).x
endif

# inherit SystemC pthread support
ifeq ($(OSSS_CFG_SYSTEMC_PTHREADS),yes)
SYSTEMC_PTHREADS := yes
else
# empty means: do not add to LDFLAGS
SYSTEMC_PTHREADS :=
endif

# configuration default values
OSSS_CFG_VERBOSE := no
OSSS_CFG_DEBUG := no
OSSS_CFG_PROFILE := no

# inherit debug and profiling settings
DEBUG   ?= $(OSSS_CFG_DEBUG)
PROFILE ?= $(OSSS_CFG_PROFILE)

# inherit compilation verbosity
VERBOSE ?= $(OSSS_CFG_VERBOSE)

# guess target architecture, if not set
TARGET_ARCH ?= $(shell uname -s | tr '[:upper:]' '[:lower:]' )

# set additional defines
#
# This variable can hold additional command-line defines, that
# should be passed to the compiler e.g "-DSC_INCLUDE_FX=1".
EXTRA_DEFINES ?=

# set include path
#
# This setting should not be modified/set directly
# from within a specific Makefile. Add directories
# to the variable $(EXTRA_INCLUDES), if you need
# additional directories
#
OSSS_INCLUDES = -I$(SYSTEMC_HOME)/include \
                $(EXTRA_INCLUDES)

# set library path
#
# This setting should not be modified/set directly
# from within a specific Makefile. Add directories
# to the variable $(EXTRA_LIBDIRS), if you need
# additional directories
#
OSSS_LIBDIRS  = -L$(SYSTEMC_LIB) \
                $(EXTRA_LIBDIRS)

# set static libraries to link against
#
# This setting should not be modified/set directly
# from within a specific Makefile. Add directories
# to the variable $(EXTRA_LIBS), if you need
# additional libraries
#
OSSS_LIBS     = -lsystemc $(if $(SYSTEMC_PTHREADS),-lpthread,) -lm $(EXTRA_LIBS)

# some helper commands
DEL      ?= rm -f

# explicitly use bash as shell
SHELL := $(shell if [ -x "$${BASH}" ] ; then echo $${BASH} ;                \
                 else if [ -n "`which bash`" ] ; then echo "`which bash`" ; \
                 else if [ -x /bin/bash ] ; then echo /bin/bash ;           \
                 fi ; fi ; fi )
ifeq (,$(SHELL))
$(error Required Bourne-again shell (bash) not found. Bailing out )
endif

#
# compiler check
#

# environmental compiler fallback
OSSS_CXX ?= $(CXX)
# hard-coded fallback
ifeq (,$(strip $(OSSS_CXX)))
OSSS_CXX := g++
endif

# compiler settings
#
# The following variables are respected during the compilation
# process. Defaults are below.
# Note:
#    CXXFLAGS_DEBUG is only added, iff $(DEBUG)  = yes
#    CXXFLAGS_OPT   is only added, iff $(DEBUG) != yes
OSSS_CXXFLAGS       ?= -Wall
OSSS_CXXFLAGS_OPT   ?= -O3
OSSS_CXXFLAGS_DEBUG ?= -g -DDEBUG=1 -DTRACE=1

#
# Look for source files
#
# C++ filename extension, defaults to "<name>.cpp"
SRCEXT  ?= cpp
ifndef SRCS
# source files are not specified directly
# check source directories - if not set, use current directory
SRCDIRS ?= .
# look for source files in all source directories
SRCS    := $(wildcard $(SRCDIRS:%=%/*.$(SRCEXT)))
endif

ifeq (,$(strip $(SRCS)))
$(error No source files found! Bailing out)
endif

# Object files
OBJS := $(SRCS:.$(SRCEXT)=.o)
# Dependency files
DEPS := $(SRCS:.$(SRCEXT)=.d)
# Preprocessor output
PRES := $(SRCS:.$(SRCEXT)=.pre)

ifneq (,$(strip $(EXTRA_DEFINES)))
OSSS_CXXFLAGS += $(EXTRA_DEFINES)
endif
ifeq (yes,$(strip $(DEBUG)))
OSSS_CXXFLAGS += $(OSSS_CXXFLAGS_DEBUG)
else
OSSS_CXXFLAGS += $(OSSS_CXXFLAGS_OPT)
endif
ifeq (yes,$(strip $(PROFILE)))
OSSS_CXXFLAGS += -pg
endif

# check, if only cleanup is requested
OSSS_CLEAN_TARGETS := clean objclean preclean depclean
OSSS_CLEAN_ONLY    := \
  $(if $(MAKECMDGOALS),$(if \
     $(filter-out $(OSSS_CLEAN_TARGETS),$(MAKECMDGOALS)),no,yes),no)

# we're building something
ifeq (no,$(OSSS_CLEAN_ONLY))

# no user supplied compiler requirement?
ifeq (,$(strip $(OSSS_MIN_CXX_VERSION)))
# require G++ >= 3.4.2
OSSS_MIN_CXX_VERSION := 030402
endif
# get current compiler version
HASH=\#
get-cxx-version-part = \
  $(shell echo $(1) | $(OSSS_CXX) -E -xc++ - 2>/dev/null | \
          sed -e  '/^$(HASH).*/d' -e '/^__.*/d' )
CXX_MAJOR   := $(call get-cxx-version-part,__GNUC__)
CXX_MINOR   := $(call get-cxx-version-part,__GNUC_MINOR__)
CXX_PATCH   := $(call get-cxx-version-part,__GNUC_PATCHLEVEL__)
CXX_VERSION := $(shell printf '%02d%02d%02d' \
                    $(CXX_MAJOR) $(CXX_MINOR) $(CXX_PATCH) )
# function, to check compiler
check-cxx   := $(shell [ $(OSSS_MIN_CXX_VERSION) -le $(CXX_VERSION) ] \
                         && echo ok )

# Environment checks
ifeq (,$(strip $(SYSTEMC_HOME)))
$(error Variable SYSTEMC_HOME not set! Bailing out)
endif

ifeq (,$(strip $(SYSTEMC_LIB)))
SYSTEMC_LIB := $(SYSTEMC_HOME)/lib-$(TARGET_ARCH)
$(warning Variable SYSTEMC_LIB is not set! Assuming '$(SYSTEMC_LIB)')
endif

# default target
all: build
# default target: build the executable
build: $(EXE)
	$(if $(check-cxx),,\
	    @echo "--- Skipping due to old compiler \
	       ($(CXX_MAJOR).$(CXX_MINOR).$(CXX_PATCH))" )
PHONY += build

# depends on object files and static version of OSSS+R library
$(EXE): $(OBJS)
	$(call cmd-cxx-exe,$(^),$(@))

# simulation target
#
# This target runs the test application after
# a succesful build process. Parameters to this run can be given
# in the variable ARGS.
sim: $(EXE)
	$(call cmd-sim,$(EXE))
PHONY += sim

# preprocess source files only
pre: $(PRES) ;
PHONY: pre

# rule to compile a single source file
%.o: %.$(SRCEXT) %.d
	$(call cmd-cxx-compile,$(<),$(@))

# rule to determine dependencies of a single source file
%.d: %.$(SRCEXT)
	$(call cmd-cxx-depend,$(<),$(@))

# Rule to preprocess a single source file
%.pre: %.$(SRCEXT) %.d
	$(call cmd-cpp-only,$(<),$(@))

endif # OSSS_CLEAN_ONLY=no

# Cleanup
objclean:
	$(call cmd-delete,$(wildcard $(OBJS)))
PHONY += objclean

preclean:
	$(call cmd-delete,$(wildcard $(PRES)))
PHONY += preclean

depclean:
	$(call cmd-delete,$(wildcard $(DEPS)))
PHONY += depclean

clean: objclean preclean depclean $(EXTRA_CLEAN)
	$(call cmd-delete,$(wildcard $(EXE)))
PHONY += clean

# actually process dependencies,
# if we are not cleaning the directory :)
ifeq (no,$(OSSS_CLEAN_ONLY))
-include $(DEPS)
endif

#
# helper functions
#

# delete files
define cmd-delete
$(foreach __f,$(1),$(call cmd-delete-file,$(__f)))
endef
# Note: empty line is required!
define cmd-delete-file
	@echo '[DEL] $(notdir $1)'
	$(Q)$(DEL) $(2) $(1)
	
endef

# compile object file
define cmd-cxx-compile
	$(if $(check-cxx),
	@echo "[CXX] $(notdir $(1))"
	$(Q)$(OSSS_CXX) -c $(OSSS_CXXFLAGS) \
	  $(OSSS_INCLUDES) \
	  -o $(2) $(1) )
endef

# process dependencies
define cmd-cxx-depend
	$(if $(check-cxx),
	@echo "[DEP] $(notdir $(1))"
	$(Q)$(OSSS_CXX) -c $(OSSS_CXXFLAGS) -MM -MP \
	  $(OSSS_INCLUDES) \
	  -MT '$(2) $(2:.d=.o)' \
	  -o $(2) $(1) )
endef

# preprocess source file
define cmd-cpp-only
	$(if $(check-cxx),
	@echo "[CPP] $(notdir $(1))"
	$(Q)$(OSSS_CXX) -E $(OSSS_CXXFLAGS) \
	  $(OSSS_INCLUDES) $(1) | cat -s > $2)
endef

# link executable
define cmd-cxx-exe
	$(if $(check-cxx),
	@echo "[EXE] $(2)"
	$(Q)$(OSSS_CXX) $(OSSS_CXXFLAGS) \
	$(OSSS_LIBDIRS) -o $(2) \
	$(OBJS) $(OSSS_LIBS) \
	2>&1 | c++filt )
endef

# start simulation
define cmd-sim
	$(if $(check-cxx), \
	@echo "*** Starting application '$(MODULE)'..."
	./$(1) $(ARGS),\
	@echo "--- Skipping due to old compiler "\
	       "($(CXX_MAJOR).$(CXX_MINOR).$(CXX_PATCH))" )
endef

# prefix, to suppress certain commands, if not building verbosely
Q := $(if $(filter-out yes,$(VERBOSE)),@)

.PHONY: $(PHONY)
# $Id: Makefile.osss 1178 2007-04-10 14:11:52Z philipph $
# :flavour: (all,d)
# TAF!
